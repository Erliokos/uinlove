// THIS FILE IS AUTOGENERATED. PLEASE DO NOT EDIT IT
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format. */
  DateTime: any;
};

export type AuthUserInput = {
  email: Scalars['String'];
  password: Scalars['String'];
};

export type CreateUserInput = {
  email: Scalars['String'];
  name?: InputMaybe<Scalars['String']>;
  password: Scalars['String'];
};

export type Mutation = {
  createUser: UserEntity;
  removeUser: Scalars['Float'];
  updateUser: UserEntity;
};


export type MutationCreateUserArgs = {
  input: CreateUserInput;
};


export type MutationRemoveUserArgs = {
  id: Scalars['Float'];
};


export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};

export type Query = {
  auth: Scalars['String'];
  getAllUsers: Array<UserEntity>;
  getOneUser: UserEntity;
};


export type QueryAuthArgs = {
  input: AuthUserInput;
};


export type QueryGetOneUserArgs = {
  id: Scalars['Float'];
};

export type UpdateUserInput = {
  email?: InputMaybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: InputMaybe<Scalars['String']>;
};

export type UserEntity = {
  createAt: Scalars['DateTime'];
  email: Scalars['String'];
  id: Scalars['ID'];
  name: Maybe<Scalars['String']>;
  passwordHash: Scalars['String'];
  updateAt: Scalars['DateTime'];
};

export type CreateUserMutationVariables = Exact<{
  input: CreateUserInput;
}>;


export type CreateUserMutation = { createUser: { id: string } };
